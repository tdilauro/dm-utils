#!/bin/bash

#######################################################################
# 2017-03-08 Tim DiLauro
# Upload a file to a dataset in a Dataverse instance via SWORD v2
#######################################################################

# Some defaults
# -- default server
DEFAULT_SW_SERVER='https://archive.data.jhu.edu'
# -- do a real run by default
DRY_RUN=0
# -- APIKEY defaults to value of DV_API_KEY, if the latter is set in the environment
APIKEY="${DV_API_KEY}" 


command_name=$(basename $0)

function print_usage {
  echo "-- HELP --------------------------------"
  echo "Usage: ${command_name} -i <dataset-pid> [-a <api-key>] [-s <server-base-url>] [--] <datafile> [<datafile>...]"
  echo "   or: ${command_name} -i <dataset-pid> [-a <api-key>] [-d <datafile>] [-f <file-name-label] [-s <server-base-url>]"
  echo
  echo "Data files must be in Zip format. In most cases, they should be double zipped."
  echo
  echo "Text in angle brackets ('<>') should be replaced by a value."
  echo "Options or parameters in square brackets ('[]') are optional."
  echo "At least one dataset pid (DOI or Handle) and one datafile must be specified." 
  echo "If a datafile is specified using '-d <datafile>', you may NOT specify a list"
  echo "of data files at the end of the command line."
  echo "Option '-a <api-key>' is REQUIRED if DV_API_KEY is not set in the enenvironment."
  echo "-- HELP --------------------------------"
}

function get_help {
  >&2 echo "Use '${command_name} --help' for help/usage."
  exit 1
}

function warn {
  >&2 echo "$@"
}

# --help
# d: data: (required) - data-binary
# f:  file (optional) - content-disposition header file name - if not specified, gets the same name as DATA, unless DATA = '-', in which case it gets named 'stdin'
# i: id: pid: (required) - the PID of the dataset to which the DataFiles should be added
# s: server: (optional) - server base url
# a: apikey: key: - API key/token
# n dry-run (optional) don't actually upload the files

# read the options
OPTIONS=$(getopt -o a:d:f:i:s:n --long help,apikey:,key:,data:,filename:,pid:,id:,dataset:,server:,dry-run -n "${command_name}" -- "$@")
eval set -- "${OPTIONS}"

# get opts and their arguments
while true; do
  case "$1" in
    -a|--apikey|--key)
      case "$2" in
        "") shift 2 ;;
        *) APIKEY=$2 ; shift 2 ;;
      esac ;;
    -d|--data)
      case "$2" in
        "") shift 2 ;;
        *) DATAFILE=$2 ; shift 2 ;;
      esac ;;
    -f|--filename)
      case "$2" in
        "") shift 2 ;;
        *) FILENAME=$2 ; shift 2 ;;
      esac ;;
    -i|--id|--pid|--dataset)
      case "$2" in
        "") shift 2 ;;
        *) DATASET_ID=$2 ; shift 2 ;;
      esac ;;
    -s|--server)
      case "$2" in
        "") shift 2 ;;
        *) SW_SERVER=$2 ; shift 2 ;;
      esac ;;
    --help) print_usage ; exit ;;
    -n|--dry-run) DRY_RUN=1; shift ;;
    --) shift ; break ;;
    *) >&2 echo "Error parsing command line option ($1)" ; exit 1 ;;
  esac
done

if [[ -z "${APIKEY}" ]] ; then
  >&2 echo "Specify an 'API KEY' or set DV_API_KEY in your environment."
  get_help
fi


if [[ -z "${DATASET_ID}" || -z "${APIKEY}" ]] ; then
  >&2 echo "A 'dataset ID' is required. Use '-i <dataset-pid>'."
 get_help
fi

if [[ -n "${DATAFILE}" && $# -gt 0 ]] ; then
  >&2 echo "A list of data files may NOT be provided when a data file is specified using '-d <datafile>'"
  get_help
elif [[ -z "${DATAFILE}" && $# -eq 0 ]] ; then
  >&2 echo "At least one data file must be specified, either by using '-d' to specify a single file or by supplying a list of one or more filenames as arguments at the end of the command."
  get_help
fi

if [[ -z "${SW_SERVER}" ]] ; then
  SW_SERVER="${DEFAULT_SW_SERVER}"
fi

if [[ -n "${DATAFILE}" ]] ; then
  eval set -- "${DATAFILE}"
fi

function zip_md5sum {
  local all_results=''
  for file in "$@"; do
    if [[ "${file}" == '--' ]]; then continue; fi
    local zipped_files=$( unzip -Z1 "${file}" | grep -v '/$' )
    if [[ -z "${zipped_files}" ]] ; then continue; fi
    local result=$( echo "$zipped_files" | tr '\n' '\0' | xargs -0 -L1 -I% sh -c "unzip -p -- '${file}' '%' | md5sum - | cut -d' ' -f1 | xargs -I{} echo '\"{}\"  \"%\"'" )
    all_results="${all_results}${result}"
    all_results+=$'\n'
  done
  echo "${all_results}"
}

# summary of files to be processed
if [[ $# -gt 0 ]] ; then
  #echo "The following datafiles will be uploaded:"
  #for file in "$@"; do
  #  echo -- "- ${file}"
  #done
  
  echo "Calculating checksums..."
  #md5sum -- "$@" | xargs -L1 echo "- md5:"
  zip_md5sum -- "$@" | xargs -L1 echo "- md5:"
  echo "...checksums complete."
fi

for DATAFILE in "$@"; do
  if [[ -z "${FILENAME}" ]] ; then
    filename="${DATAFILE}"
  else
    filename="${FILENAME}"
  fi
  echo -n "--- SWORD upload to '${DATASET_ID}' - file: '${DATAFILE}' ..."
  if [[ ${DRY_RUN} == 1 ]] ; then
    result="* dry_run: no result *"
  else
    result=$(
      curl --insecure -u ${APIKEY}: \
         --data-binary "@${DATAFILE}" \
         -H "Content-Disposition: filename=${filename}" \
         -H "Content-Type: application/zip" \
         -H "Packaging: http://purl.org/net/sword/package/SimpleZip" \
         "${SW_SERVER}/dvn/api/data-deposit/v1.1/swordv2/edit-media/study/${DATASET_ID}"
    )
  fi
  echo " ...done. ---"
  echo "*** Result ***"
  echo "${result}"
  echo "--- ...done... ---"
done
